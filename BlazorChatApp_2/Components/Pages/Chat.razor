@page "/chat"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.EntityFrameworkCore
@using BlazorChatApp_2.Models
@using BlazorChatApp_2.Data
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Net
@using BlazorChatApp_2.Components.Layout
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> UserManager
@inject BlazorChatApp_2.Data.ApplicationDbContext _db
@inject AuthenticationStateProvider authStateProvider
@implements IAsyncDisposable



<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @if (messages is not null)
    {
        @foreach (var message in messages)
        {
            <li>@($"{message.Sender.Nickname} : {message.Text}")</li>
        }
    }
</ul>

@code {

    [CascadingParameter]
    public IRequestCookieCollection? Cookies { get; set; }

    private HubConnection? hubConnection;
    private List<Message>? messages;
    private string? messageInput;
    private AuthenticationState? authenticationState;
    protected override async Task OnInitializedAsync()
    {
        authenticationState = await authStateProvider.GetAuthenticationStateAsync();
        messages = await _db.Messages.Include(message => message.Sender).ToListAsync();
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"), options =>
            {
                options.UseDefaultCredentials = true;
                var cookieCount = Cookies.Count();
                var cookieContainer = new CookieContainer(cookieCount);
                foreach (var cookie in Cookies)
                    cookieContainer.Add(new Cookie(
                cookie.Key,
                WebUtility.UrlEncode(cookie.Value),
                path: "/",
                domain: Navigation.ToAbsoluteUri("/").Host));
                options.Cookies = cookieContainer;
            })
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<Message>("ReceiveMessage", (message) =>
        {
            messages.Add(message);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
        
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            ApplicationUser? user = await UserManager.GetUserAsync(authenticationState.User);
            Message? msg = new Message(messageInput, DateTime.UtcNow, user);
            messageInput = String.Empty;
            _db.Messages.Add(msg);
            await _db.SaveChangesAsync();
            msg = await _db.Messages.Include(message => message.Sender).FirstOrDefaultAsync(
                message => message.Text == msg.Text && 
                message.SenderId == msg.SenderId && 
                DateTime.Compare(message.DateTime, msg.DateTime) == 0 );
            await hubConnection.SendAsync("SendMessage", msg, authenticationState.User.Identity.Name);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}