@page "/chat"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.EntityFrameworkCore
@using BlazorChatApp_2.Models
@using BlazorChatApp_2.Data
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Net
@using BlazorChatApp_2.Components.Layout
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> UserManager
@inject IDbContextFactory<ApplicationDbContext> contextFactory
@inject AuthenticationStateProvider authStateProvider
@implements IAsyncDisposable
<div class="sidebar">
    <div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
        <nav class="flex-column">
            @if (chats is not null && chats.Count > 0)
            {
                @foreach (var ch in chats)
                {
                    <div class="nav-item px-3" @onclick="@(e => ChangeChat(ch))">
                        <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> @ch.Name (@ch.Members[0].Nickname, @ch.Members[1].Nickname)
                    </div>
                }
            }
        </nav>
    </div>
</div>



<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>
<div class="form-group">
    <label>
        Create chat with:
        <input @bind="chatInput" size="50" />
    </label>
</div>
<button @onclick="AddNewChat" disabled="@(!IsConnected)">Create</button>
<hr>

<ul id="messagesList">
    @if (currentChat?.Messages is not null && currentChat?.Messages.Count > 0)
    {
        @foreach (var message in currentChat.Messages)
        {
            <li>@($"{message.Sender.Nickname} : {message.Text}")</li>
        }
    }
</ul>

@code {

    [CascadingParameter]
    public IRequestCookieCollection? Cookies { get; set; }

    private HubConnection? hubConnection;
    private List<Models.Chat>? chats;
    private string? messageInput;
    private string? chatInput;
    private Models.Chat? currentChat;
    private AuthenticationState? authenticationState;
    protected override async Task OnInitializedAsync()
    {
        authenticationState = await authStateProvider.GetAuthenticationStateAsync();
        //messages = await _db.Messages.Include(message => message.Sender).ToListAsync();
        ApplicationUser? user = await UserManager.GetUserAsync(authenticationState.User);
        using var _db = contextFactory.CreateDbContext();
        user = await _db.Users.Where(u => u.Id == user.Id)
                              .Include(u => u.Chats)
                                .ThenInclude(chat => chat.Messages)
                              .Include(u => u.Chats)
                                .ThenInclude(chat => chat.Members)
                              .FirstOrDefaultAsync();
        chats = user?.Chats;
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"), options =>
            {
                options.UseDefaultCredentials = true;
                var cookieCount = Cookies.Count();
                var cookieContainer = new CookieContainer(cookieCount);
                foreach (var cookie in Cookies)
                    cookieContainer.Add(new Cookie(
                cookie.Key,
                WebUtility.UrlEncode(cookie.Value),
                path: "/",
                domain: Navigation.ToAbsoluteUri("/").Host));
                options.Cookies = cookieContainer;
            })
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<string>("ReceiveMessage", (serializedMessage) =>
        {
            Message? message = Newtonsoft.Json.JsonConvert.DeserializeObject<Message>(serializedMessage);
            chats?.First(ch => ch.Id == message.ChatId)?.Messages?.Add(message);
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<Message>("ReceiveMessage2", (message) =>
        {
            chats?.First(ch => ch.Id == message.ChatId)?.Messages?.Add(message);
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<string>("AddChat", (serializedChat) =>
        {
            Models.Chat? chat = Newtonsoft.Json.JsonConvert.DeserializeObject<Models.Chat>(serializedChat);
            chats?.Add(chat);
            InvokeAsync(StateHasChanged);
        });
        await hubConnection.StartAsync();

    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            ApplicationUser? user = await UserManager.GetUserAsync(authenticationState.User);
            Message? msg = new Message(messageInput, DateTime.UtcNow, user, currentChat.Id);
            var userIds = currentChat?.Members?.Select(member => member.Id).ToList();
            //userIds.Remove(user.Id);
            messageInput = String.Empty;
            using (var _db = contextFactory.CreateDbContext()) {
                _db.Messages.Add(msg);
                await _db.SaveChangesAsync();
            }
            msg.Sender = user;
            string serializedMsg = Newtonsoft.Json.JsonConvert.SerializeObject(msg, Newtonsoft.Json.Formatting.Indented,
                    new Newtonsoft.Json.JsonSerializerSettings
                    {
                            ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore
                    });
            await hubConnection.SendAsync("SendMessage", serializedMsg, userIds);
            //await hubConnection.SendAsync("SendMessage2", msg, userIds);
        }
    }
    private async Task AddNewChat()
    {
        if (hubConnection is not null)
        {
            using var _db = contextFactory.CreateDbContext();
            ApplicationUser? user1 = await _db.Users.FirstOrDefaultAsync(usr => usr.UserName == authenticationState.User.Identity.Name);
            ApplicationUser? user2 = await _db.Users.FirstOrDefaultAsync(usr => usr.UserName == chatInput);
            Models.Chat? newChat;
            if (chats?.Count > 0)
            {
                newChat = chats?.FirstOrDefault(cht => cht.Members.Contains(user2));
                if (newChat is not null)
                {
                    return;
                }
            }
            newChat = new Models.Chat("Chat", "No description yet", user1, user2);
            chatInput = String.Empty;
            _db.Chats.Add(newChat);
            await _db.SaveChangesAsync();
            string serializedChat = Newtonsoft.Json.JsonConvert.SerializeObject(newChat, Newtonsoft.Json.Formatting.Indented,
                 new Newtonsoft.Json.JsonSerializerSettings
                {
                    ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore
                });
            string[] userIds = newChat.Members.Select(member => member.Id).ToArray();
            await hubConnection.SendAsync("SendNewChat", serializedChat, userIds);
        }
    }
    private async Task ChangeChat(Models.Chat newOpenedChat)
    {
        currentChat = newOpenedChat;
        await InvokeAsync(StateHasChanged);
    }
    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}